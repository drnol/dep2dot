#!/usr/bin/env python
# encoding: utf-8
'''
dep2dot -- make .dot graph file from .depend dependency file

dep2dot is a make .dot graph file from .depend dependency file

It defines classes_and_methods

@author:     drnol

@copyright:  2014 Codeminds, Korea. All rights reserved.

@license:    Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0

@contact:    rho@codeminds.co.kr
@deffield    updated: Updated
'''

import sys
import os
import fnmatch

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2014-05-22'
__updated__ = '2014-05-22'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

skips = []

def set_skips(s):
    global skips
    skips = s.split(',')
    skips = [elt for elt in skips if elt != '']

def is_skip_file(fn):
    global skips
    for s in skips:    
        if fnmatch.fnmatch(fn, s):
            return True
    return False

def convert(infile):    
    f = open(infile)
    
    data = "digraph G {\n"
    
    target_file = None
    
    for line in f:
        # split target file and depend file
        if target_file == None:
            sline = line.split(':')
            
            if len(sline)!=2:
                continue
            
            tfile = sline[0].replace(' ','')
            dep_files = sline[1].split(' ')
                        
            if is_skip_file(tfile):
                continue
                        
            target_file = tfile.replace('.','_')
            data += "\t%s [label=\"%s\" shape=\"ellipse\" color=\"blue\"];\n" % (target_file,tfile)
        else:
            dep_files = line.split(' ')
            
        # add relation        
        for dep_file in dep_files:
            dep_file = dep_file.replace('\n','').replace('\\','')
            
            if is_skip_file(tfile):
                continue
            
            dep_file = dep_file.replace('.','_')
            
            if dep_file != '':
                dep_file = dep_file.replace('\n','')
                data += "\t%s -> %s;\n" % (target_file,dep_file)
        
        # continuation        
        if line.find("\\") < 0:
            target_file = None
    
    data += "}\n"
    
    f.close()
    
    return data

def write(outfile,data):
    f = open(outfile, 'w')
    f.write(data)
    f.close()

def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2014 drnol (Codeminds, Korea)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-i", "--in", dest="infile", help="set input path [default: %default]", metavar="FILE")
        parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
        parser.add_option("-s", "--skips", dest="skips", help="skipping file extensions (*.aaa,*.bbb,...)[default: %default]")
        #parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        parser.set_defaults(outfile="dep.dot", infile=".depend", skips="*.cmx")
        
        # process options
        (opts, args) = parser.parse_args(argv)

        #if opts.verbose > 0:
        #    print("verbosity level = %d" % opts.verbose)
        if opts.infile:
            print("infile = %s" % opts.infile)
        if opts.outfile:
            print("outfile = %s" % opts.outfile)

        # main
        set_skips(opts.skips)
        data = convert(opts.infile)
        write(opts.outfile,data)

    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        return 2


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'dep2dot_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())